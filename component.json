{
    "title": "Amazon CloudWatch",
    "description": "Amazon CloudWatch monitors your Amazon Web Services (AWS) resources and the\napplications you run on AWS in real time. You can use CloudWatch to collect and\ntrack metrics, which are the variables you want to measure for your resources\nand applications.\n\nCloudWatch alarms send notifications or automatically change the resources you\nare monitoring based on rules that you define. For example, you can monitor the\nCPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this\ndata to determine whether you should launch additional instances to handle\nincreased load. You can also use this data to stop under-used instances to save\nmoney.\n\nIn addition to monitoring the built-in metrics that come with AWS, you can\nmonitor your own custom metrics. With CloudWatch, you gain system-wide\nvisibility into resource utilization, application performance, and operational\nhealth.",
    "docsUrl": "https://docs.aws.amazon.com/monitoring/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/monitoring/2010-08-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://monitoring.amazonaws.com/",
                    "http://monitoring.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "DeleteAlarms": {
            "main": "./lib/actions/DeleteAlarms.js",
            "title": "DeleteAlarms",
            "description": "Deletes the specified alarms. In the event of an error, no alarms are deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAlarms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteDashboards": {
            "main": "./lib/actions/DeleteDashboards.js",
            "title": "DeleteDashboards",
            "description": "Deletes all dashboards that you specify. You may specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteDashboards.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAlarmHistory": {
            "main": "./lib/actions/DescribeAlarmHistory.js",
            "title": "DescribeAlarmHistory",
            "description": "Retrieves the history for the specified alarm. You can filter the results by\ndate range or item type. If an alarm name is not specified, the histories for\nall alarms are returned.\n\nCloudWatch retains the history of an alarm even if you delete the alarm.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAlarmHistory.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAlarms": {
            "main": "./lib/actions/DescribeAlarms.js",
            "title": "DescribeAlarms",
            "description": "Retrieves the specified alarms. If no alarms are specified, all alarms are returned. Alarms can be retrieved by using only a prefix for the alarm name, the alarm state, or a prefix for any action.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAlarms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAlarmsForMetric": {
            "main": "./lib/actions/DescribeAlarmsForMetric.js",
            "title": "DescribeAlarmsForMetric",
            "description": "Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAlarmsForMetric.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisableAlarmActions": {
            "main": "./lib/actions/DisableAlarmActions.js",
            "title": "DisableAlarmActions",
            "description": "Disables the actions for the specified alarms. When an alarm's actions are disabled, the alarm actions do not execute when the alarm state changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisableAlarmActions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableAlarmActions": {
            "main": "./lib/actions/EnableAlarmActions.js",
            "title": "EnableAlarmActions",
            "description": "Enables the actions for the specified alarms.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableAlarmActions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetDashboard": {
            "main": "./lib/actions/GetDashboard.js",
            "title": "GetDashboard",
            "description": "Displays the details of the dashboard that you specify.\n\nTo copy an existing dashboard, use GetDashboard, and then use the data returned\nwithin DashboardBody as the template for the new dashboard when you call \nPutDashboard to create the copy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetDashboard.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetMetricData": {
            "main": "./lib/actions/GetMetricData.js",
            "title": "GetMetricData",
            "description": "You can use the GetMetricData API to retrieve as many as 100 different metrics\nin a single request, with a total of as many as 100,800 datapoints. You can also\noptionally perform math expressions on the values of the returned statistics, to\ncreate new time series that represent new insights into your data. For example,\nusing Lambda metrics, you could divide the Errors metric by the Invocations\nmetric to get an error rate time series. For more information about metric math\nexpressions, see Metric Math Syntax and Functions\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax] \nin the Amazon CloudWatch User Guide.\n\nCalls to the GetMetricData API have a different pricing structure than calls to \nGetMetricStatistics. For more information about pricing, see Amazon CloudWatch\nPricing [https://aws.amazon.com/cloudwatch/pricing/].\n\nAmazon CloudWatch retains metric data as follows:\n\n *  Data points with a period of less than 60 seconds are available for 3 hours.\n   These data points are high-resolution metrics and are available only for\n   custom metrics that have been defined with a StorageResolution of 1.\n   \n   \n *  Data points with a period of 60 seconds (1-minute) are available for 15\n   days.\n   \n   \n *  Data points with a period of 300 seconds (5-minute) are available for 63\n   days.\n   \n   \n *  Data points with a period of 3600 seconds (1 hour) are available for 455\n   days (15 months).\n   \n   \n\nData points that are initially published with a shorter period are aggregated\ntogether for long-term storage. For example, if you collect data using a period\nof 1 minute, the data remains available for 15 days with 1-minute resolution.\nAfter 15 days, this data is still available, but is aggregated and retrievable\nonly with a resolution of 5 minutes. After 63 days, the data is further\naggregated and is available with a resolution of 1 hour.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetMetricData.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetMetricStatistics": {
            "main": "./lib/actions/GetMetricStatistics.js",
            "title": "GetMetricStatistics",
            "description": "Gets statistics for the specified metric.\n\nThe maximum number of data points returned from a single call is 1,440. If you\nrequest more than 1,440 data points, CloudWatch returns an error. To reduce the\nnumber of data points, you can narrow the specified time range and make multiple\nrequests across adjacent time ranges, or you can increase the specified period.\nData points are not returned in chronological order.\n\nCloudWatch aggregates data points based on the length of the period that you\nspecify. For example, if you request statistics with a one-hour period,\nCloudWatch aggregates all data points with time stamps that fall within each\none-hour period. Therefore, the number of values aggregated by CloudWatch is\nlarger than the number of data points returned.\n\nCloudWatch needs raw data points to calculate percentile statistics. If you\npublish data using a statistic set instead, you can only retrieve percentile\nstatistics for this data if one of the following conditions is true:\n\n *  The SampleCount value of the statistic set is 1.\n   \n   \n *  The Min and the Max values of the statistic set are equal.\n   \n   \n\nPercentile statistics are not available for metrics when any of the metric\nvalues are negative numbers.\n\nAmazon CloudWatch retains metric data as follows:\n\n *  Data points with a period of less than 60 seconds are available for 3 hours.\n   These data points are high-resolution metrics and are available only for\n   custom metrics that have been defined with a StorageResolution of 1.\n   \n   \n *  Data points with a period of 60 seconds (1-minute) are available for 15\n   days.\n   \n   \n *  Data points with a period of 300 seconds (5-minute) are available for 63\n   days.\n   \n   \n *  Data points with a period of 3600 seconds (1 hour) are available for 455\n   days (15 months).\n   \n   \n\nData points that are initially published with a shorter period are aggregated\ntogether for long-term storage. For example, if you collect data using a period\nof 1 minute, the data remains available for 15 days with 1-minute resolution.\nAfter 15 days, this data is still available, but is aggregated and retrievable\nonly with a resolution of 5 minutes. After 63 days, the data is further\naggregated and is available with a resolution of 1 hour.\n\nCloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.\n\nFor information about metrics and dimensions supported by AWS services, see the \nAmazon CloudWatch Metrics and Dimensions Reference\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html] \nin the Amazon CloudWatch User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetMetricStatistics.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetMetricWidgetImage": {
            "main": "./lib/actions/GetMetricWidgetImage.js",
            "title": "GetMetricWidgetImage",
            "description": "You can use the GetMetricWidgetImage API to retrieve a snapshot graph of one or\nmore Amazon CloudWatch metrics as a bitmap image. You can then embed this image\ninto your services and products, such as wiki pages, reports, and documents. You\ncould also retrieve images regularly, such as every minute, and create your own\ncustom live dashboard.\n\nThe graph you retrieve can include all CloudWatch metric graph features,\nincluding metric math and horizontal and vertical annotations.\n\nThere is a limit of 20 transactions per second for this API. Each \nGetMetricWidgetImage action has the following limits:\n\n *  As many as 100 metrics in the graph.\n   \n   \n *  Up to 100 KB uncompressed payload.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetMetricWidgetImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListDashboards": {
            "main": "./lib/actions/ListDashboards.js",
            "title": "ListDashboards",
            "description": "Returns a list of the dashboards for your account. If you include \nDashboardNamePrefix, only those dashboards with names starting with the prefix\nare listed. Otherwise, all dashboards in your account are listed. \n\n ListDashboards returns up to 1000 results on one page. If there are more than\n1000 dashboards, you can call ListDashboards again and include the value you\nreceived for NextToken in the first call, to receive the next 1000 results.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListDashboards.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListMetrics": {
            "main": "./lib/actions/ListMetrics.js",
            "title": "ListMetrics",
            "description": "List the specified metrics. You can use the returned metrics with GetMetricData \nor GetMetricStatistics to obtain statistical data.\n\nUp to 500 results are returned for any one call. To retrieve additional results,\nuse the returned token with subsequent calls.\n\nAfter you create a metric, allow up to fifteen minutes before the metric\nappears. Statistics about the metric, however, are available sooner using \nGetMetricData or GetMetricStatistics.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListMetrics.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutDashboard": {
            "main": "./lib/actions/PutDashboard.js",
            "title": "PutDashboard",
            "description": "Creates a dashboard if it does not already exist, or updates an existing\ndashboard. If you update a dashboard, the entire contents are replaced with what\nyou specify here.\n\nThere is no limit to the number of dashboards in your account. All dashboards in\nyour account are global, not region-specific.\n\nA simple way to create a dashboard using PutDashboard is to copy an existing\ndashboard. To copy an existing dashboard using the console, you can load the\ndashboard and then use the View/edit source command in the Actions menu to\ndisplay the JSON block for that dashboard. Another way to copy a dashboard is to\nuse GetDashboard, and then use the data returned within DashboardBody as the\ntemplate for the new dashboard when you call PutDashboard.\n\nWhen you create a dashboard with PutDashboard, a good practice is to add a text\nwidget at the top of the dashboard with a message that the dashboard was created\nby script and should not be changed in the console. This message could also\npoint console users to the location of the DashboardBody script or the\nCloudFormation template used to create the dashboard.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutDashboard.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutMetricAlarm": {
            "main": "./lib/actions/PutMetricAlarm.js",
            "title": "PutMetricAlarm",
            "description": "Creates or updates an alarm and associates it with the specified metric or\nmetric math expression.\n\nWhen this operation creates an alarm, the alarm state is immediately set to \nINSUFFICIENT_DATA. The alarm is then evaluated and its state is set\nappropriately. Any actions associated with the new state are then executed.\n\nWhen you update an existing alarm, its state is left unchanged, but the update\ncompletely overwrites the previous configuration of the alarm.\n\nIf you are an IAM user, you must have Amazon EC2 permissions for some alarm\noperations:\n\n *   iam:CreateServiceLinkedRole for all alarms with EC2 actions\n   \n   \n *   ec2:DescribeInstanceStatus and ec2:DescribeInstances for all alarms on EC2\n   instance status metrics\n   \n   \n *   ec2:StopInstances for alarms with stop actions\n   \n   \n *   ec2:TerminateInstances for alarms with terminate actions\n   \n   \n *   ec2:DescribeInstanceRecoveryAttribute and ec2:RecoverInstances for alarms\n   with recover actions\n   \n   \n\nIf you have read/write permissions for Amazon CloudWatch but not for Amazon EC2,\nyou can still create an alarm, but the stop or terminate actions are not\nperformed. However, if you are later granted the required permissions, the alarm\nactions that you created earlier are performed.\n\nIf you are using an IAM role (for example, an EC2 instance profile), you cannot\nstop or terminate the instance using alarm actions. However, you can still see\nthe alarm state and perform any other actions such as Amazon SNS notifications\nor Auto Scaling policies.\n\nIf you are using temporary security credentials granted using AWS STS, you\ncannot stop or terminate an EC2 instance using alarm actions.\n\nThe first time you create an alarm in the AWS Management Console, the CLI, or by\nusing the PutMetricAlarm API, CloudWatch creates the necessary service-linked\nrole for you. The service-linked role is called \nAWSServiceRoleForCloudWatchEvents. For more information, see AWS service-linked\nrole\n[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutMetricAlarm.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutMetricData": {
            "main": "./lib/actions/PutMetricData.js",
            "title": "PutMetricData",
            "description": "Publishes metric data points to Amazon CloudWatch. CloudWatch associates the\ndata points with the specified metric. If the specified metric does not exist,\nCloudWatch creates the metric. When CloudWatch creates a metric, it can take up\nto fifteen minutes for the metric to appear in calls to ListMetrics.\n\nYou can publish either individual data points in the Value field, or arrays of\nvalues and the number of times each value occurred during the period by using\nthe Values and Counts fields in the MetricDatum structure. Using the Values and \nCounts method enables you to publish up to 150 values per metric with one \nPutMetricData request, and supports retrieving percentile statistics on this\ndata.\n\nEach PutMetricData request is limited to 40 KB in size for HTTP POST requests.\nYou can send a payload compressed by gzip. Each request is also limited to no\nmore than 20 different metrics.\n\nAlthough the Value parameter accepts numbers of type Double, CloudWatch rejects\nvalues that are either too small or too large. Values must be in the range of\n8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2). In\naddition, special values (for example, NaN, +Infinity, -Infinity) are not\nsupported.\n\nYou can use up to 10 dimensions per metric to further clarify what data the\nmetric collects. For more information about specifying dimensions, see \nPublishing Metrics\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html] \nin the Amazon CloudWatch User Guide.\n\nData points with time stamps from 24 hours ago or longer can take at least 48\nhours to become available for GetMetricData or GetMetricStatistics from the time\nthey are submitted.\n\nCloudWatch needs raw data points to calculate percentile statistics. If you\npublish data using a statistic set instead, you can only retrieve percentile\nstatistics for this data if one of the following conditions is true:\n\n *  The SampleCount value of the statistic set is 1 and Min, Max, and Sum are all\n   equal.\n   \n   \n *  The Min and Max are equal, and Sum is equal to Min multiplied by SampleCount.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutMetricData.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetAlarmState": {
            "main": "./lib/actions/SetAlarmState.js",
            "title": "SetAlarmState",
            "description": "Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to <code>ALARM</code> sends an SNS message. The alarm returns to its actual state (often within seconds). Because the alarm state change happens quickly, it is typically only visible in the alarm's <b>History</b> tab in the Amazon CloudWatch console or through <a>DescribeAlarmHistory</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetAlarmState.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}